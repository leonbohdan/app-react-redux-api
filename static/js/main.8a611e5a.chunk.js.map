{"version":3,"sources":["redux/store.js","api/api.js","components/MovieCard/MovieCard.jsx","components/Loader/Loader.jsx","components/MoviesList/MoviesList.jsx","components/FindMovie/FindMovie.jsx","components/SearchMovies/SearchMovies.jsx","components/Pagination/Pagination.jsx","App.jsx","index.js"],"names":["intialState","movies","searchTitle","loading","currentPage","moviesPerPage","totalMovies","history","selectors","state","actions","setMovies","type","setCurrentPage","pageNumber","setLoading","payload","setSearchTitle","query","setTotalMovies","store","createStore","action","movie","filter","imdbID","composeWithDevTools","subscribe","sessionStorage","setItem","JSON","stringify","setSessionStorage","title","MovieCard","Title","Description","Poster","imdbUrl","useState","details","setDetails","dispatch","useDispatch","className","CN","src","alt","href","onClick","deleteMovie","Loader","MoviesList","map","key","imdbId","URL_API","getMovies","page","fetch","then","response","json","console","log","SearchMovies","searchMovies","notFound","setNotFound","useSelector","onSubmit","event","preventDefault","htmlFor","id","placeholder","header__input","value","onChange","target","Pagination","paginate","pageNumbers","pagesCount","i","push","createPages","Math","ceil","App","a","Response","Search","totalResults","indexOfLastMovie","indexOfFirstMovie","currentMovies","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a611e5a.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst intialState = {\n  movies: [],\n  searchTitle: '',\n  loading: false,\n  currentPage: 1,\n  moviesPerPage: 10,\n  totalMovies: 0,\n  history: [],\n};\n\nexport const selectors = {\n  getMovies: state => state.movies,\n  getSearchTitle: state => state.searchTitle,  getLoading: state => state.loading,\n  getCurrentPage: state => state.currentPage,\n  getMoviesPerPage: state => state.moviesPerPage,\n  getTotalMovies: state => state.totalMovies,\n}\n\nconst SET_MOVIES = 'SET_MOVIES';\nconst ADD_MOVIE = 'ADD_MOVIE';\nconst DELETE_MOVIE = 'DELETE_MOVIE';\n// const FILTER_MOVIES = 'FILTER_MOVIES';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_LOADING = 'SET_LOADING';\nconst SET_SEARCH_TITLE = 'SET_SEARCH_TITLE';\nconst SET_TOTAL_MOVIES = 'SET_TOTAL_MOVIES';\n\nexport const actions = {\n  setMovies: (movies) => ({\n    type: SET_MOVIES,\n    movies,\n  }),\n\n  // addMovie: (movie) => ({\n  //   type: ADD_MOVIE,\n  //   movie,\n  // }),\n\n  // deleteMovie: (imdbId) => ({\n  //   type: DELETE_MOVIE,\n  //   imdbId,\n  // }),\n\n  // filterMovies: (query) => ({\n  //   type: FILTER_MOVIES,\n  //   query,\n  // }),\n\n  setCurrentPage: (pageNumber) => ({\n    type: SET_CURRENT_PAGE,\n    pageNumber,\n  }),\n\n  setLoading: (payload) => ({\n    type: SET_LOADING,\n    payload,\n  }),\n\n  setSearchTitle: (query) => ({\n    type: SET_SEARCH_TITLE,\n    query,\n  }),\n\n  setTotalMovies: (totalMovies) => ({\n    type: SET_TOTAL_MOVIES,\n    totalMovies,\n  }),\n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case SET_MOVIES:\n      return {\n        ...state,\n        movies: action.movies,\n        // totalMovies: action.movies.totalResults,\n      };\n\n    case ADD_MOVIE:\n      return {\n        ...state,\n        movies: [action.movie, ...state.movies],\n        // totalMovies: (state.totalMovies += 1),\n      };\n\n    case DELETE_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.filter((movie) => movie.imdbID !== action.imdbID),\n        // totalMovies: (state.totalMovies -= 1),\n      };\n\n    // case FILTER_MOVIES:\n    //   return {\n    //     ...state,\n    //     movies: state.movies.filter(\n    //       (movie) =>\n    //         movie.title.toLowerCase().includes(action.query) ||\n    //         movie.description.toLowerCase().includes(action.query),\n    //     ),\n    //   };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.pageNumber,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    case SET_SEARCH_TITLE:\n      return {\n        ...state,\n        searchTitle: action.query,\n      };\n\n    case SET_TOTAL_MOVIES:\n      return {\n        ...state,\n        totalMovies: action.totalMovies,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, composeWithDevTools());\n\nfunction setSessionStorage(intialState) {\n  return store.subscribe(() => {sessionStorage\n  .setItem('moviesStore', JSON.stringify(intialState)\n  )})\n}\n\nsetSessionStorage(intialState);\n\nexport default store;","const URL_API = 'https://www.omdbapi.com/';\n\nexport function getMovies(title, page) {\n  return fetch(\n    `${URL_API}?apikey=d905f6c1&s=${title}&page=${page}`\n  )\n    .then(response => response.json())\n    // .then(data => data.Search);\n}\n\nexport function getDetails(title) {\n  return fetch(`${URL_API}?apikey=d905f6c1&t=${title}`)\n    .then(response => response.json());\n}\n\nconsole.log(getMovies('terminator'));\nconsole.log(getDetails('Terminator Genisys'));\n","import React, { useState } from 'react';\nimport './MovieCard.scss';\nimport CN from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { actions } from \"../../redux/store\";\n// import { getMovie } from '../../api/api'\n\nexport const MovieCard = ({\n  Title,\n  Description = '',\n  Poster,\n  imdbUrl,\n  imdbID,\n}) => {\n  const [details, setDetails] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"card\">\n      <div className={CN('card__container', {\n        'is-flipped': details,\n      })}>\n        <figure className=\"card__face card__face--front \">\n          <img\n            src={Poster}\n            alt=\"Film logo\"\n            className=\"card__image\"\n          />\n        </figure>\n\n        <div className=\"card__face card__face--back \">\n          <div className=\"media-content\">\n            <p className=\"title\">{Title}</p>\n          </div>\n\n          <div className=\"content\">\n            {Description}\n            <br />\n            <a href={imdbUrl}>IMDB</a>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"card__content\">\n        <div className=\"card__content--buttons\">\n          <button\n            type=\"button\"\n            className=\"card__content--button\"\n            onClick={() => {setDetails(!details)}}\n          >\n            Show more\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"card__content--button\"\n            onClick={() => {\n              dispatch(actions.deleteMovie(imdbID));\n            }}\n          >\n            Delete film\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { Loader } from '../Loader';\n\nexport const MoviesList = ({\n  movies,\n  loading,\n}) => {\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"movies\">\n      {movies.map((movie) => (\n        <MovieCard key={movie.imdbId} {...movie} />\n      ))}\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './FindMovie.scss';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n// import { MovieCard } from '../MovieCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, selectors } from '../../redux/store';\n\nimport { getMovies } from '../../api/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const dispatch = useDispatch();\n  const searchTitle = useSelector(selectors.getSearchTitle);\n  const movies = useSelector(selectors.getMovies);\n\n  const [loading, setLoading] = useState(false);\n  const [foundMovie, setFoundMovie] = useState(null);\n  const [notFound, setNotFound] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [canAddMovie, setCanAddMovie] = useState(false);\n\n  // useEffect(() => {\n  //   const fetchMovies = async () => {\n  //     const \n  //     dispatch(actions.setMovies());\n  //   }\n\n  //   fetchMovies();\n\n  // }, [searchTitle]);\n\n  const searchMovie = async (title) => {\n    setLoading(true);\n    const movies = await getMovies(title);\n\n    if (movies.Response === 'False') {\n      setLoading(false);\n      setNotFound(true);\n      setShowPreview(false);\n      setCanAddMovie(false);\n      return;\n    }\n\n    console.log(movies);\n    dispatch(actions.setMovies([...movies]));\n    \n    setLoading(false);\n    setNotFound(false);\n    setShowPreview(true);\n    setCanAddMovie(true);\n  };\n\n  return (\n    <div className=\"finder\">\n      <form\n        className=\"finder__form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          searchMovie(searchTitle);\n        }}\n        autoComplete=\"off\"\n      >\n        <div className=\"finder__field\">\n          <label\n            className=\"finder__label\"\n            htmlFor=\"movie-title\"\n          >\n            Movies searching\n          </label>\n\n          <div className=\"finder__control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search...\"\n              className={CN({\n                finder__input: true,\n                \"finder__input--is-danger\": notFound,\n              })}\n              value={searchTitle}\n              onChange={(event) => {\n                dispatch(actions.setSearchTitle(event.target.value));\n                setNotFound(false);\n              }}\n            />\n          </div>\n\n          {notFound && (\n            <p className=\"finder__help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"finder__field finder__field--is-grouped\">\n          <div className=\"finder__control\">\n            <button\n              type=\"submit\"\n              className=\"finder__button is-light\"\n            >\n              Find movies\n            </button>\n          </div>\n\n          {/* <div className=\"finder__control\">\n            <button\n              type=\"button\"\n              className=\"finder__button is-primary\"\n              disabled={!canAddMovie}\n              onClick={() => {\n                addMovie(foundMovie);\n                setLoading(false);\n                setShowPreview(false);\n                setCanAddMovie(false);\n                dispatch(actions.setSearchTitle(''));\n              }}\n            >\n              Add to the list\n            </button>\n          </div> */}\n        </div>\n      </form>\n\n      {/* {showPreview && (\n        <div className=\"container\">\n          <h2 className=\"container__title\">Preview</h2>\n            {loading ? (\n              <Loader />\n            ) : (\n              <MovieCard {...foundMovie} />\n            )}\n        </div>\n      )} */}\n    </div>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './SearchMovies.scss';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, selectors } from '../../redux/store';\n\nexport const SearchMovies = ({\n  searchMovies,\n  notFound,\n  setNotFound\n}) => {\n  const dispatch = useDispatch();\n  const searchTitle = useSelector(selectors.getSearchTitle);\n\n  return (\n    <div className=\"header\">\n      <form\n        className=\"finder__form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          searchMovies(searchTitle, 1);\n          dispatch(actions.setSearchTitle(\"\"));\n          // dispatch(actions.setCurrentPage(1));\n        }}\n        // autoComplete=\"off\"\n      >\n        <div className=\"header__field\">\n          <label className=\"header__label\" htmlFor=\"movie-title\">\n            Movies searching\n          </label>\n\n          <div className=\"header__control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search...\"\n              className={CN({\n                header__input: true,\n                \"header__input--is-danger\": notFound,\n              })}\n              value={searchTitle}\n              onChange={(event) => {\n                dispatch(actions.setSearchTitle(event.target.value));\n                setNotFound(false);\n              }}\n            />\n          </div>\n\n          {notFound && (\n            <p className=\"header__help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"header__field header__field--is-grouped\">\n          <div className=\"header__control\">\n            <button type=\"submit\" className=\"header__button is-light\">\n              Find movies\n            </button>\n          </div>\n\n          {/* <div className=\"header__control\">\n            <button\n              type=\"button\"\n              className=\"header__button is-primary\"\n              disabled={!canAddMovie}\n              onClick={() => {\n                // addMovie(foundMovie);\n                setLoading(false);\n                setShowPreview(false);\n                setCanAddMovie(false);\n                dispatch(actions.setSearchTitle(''));\n              }}\n            >\n              Add to the list\n            </button>\n          </div> */}\n        </div>\n      </form>\n    </div>\n  );\n};\n\nSearchMovies.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n  notFound: PropTypes.bool.isRequired,\n  setNotFound: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actions, selectors } from '../../redux/store';\nimport './Pagination.scss';\nimport CN from 'classnames';\n\nexport const Pagination = ({\n  moviesPerPage,\n  totalMovies,\n  paginate\n}) => {\n  const dispatch = useDispatch();\n  const currentPage = useSelector(selectors.getCurrentPage);\n  const pageNumbers = [];\n  const pagesCount = Math.ceil(totalMovies / moviesPerPage);\n\n  // for (let i = 1; i <= Math.ceil(totalMovies / moviesPerPage); i++) {\n  //   pageNumbers.push(i);\n  // }\n\n  function createPages(pageNumbers, pagesCount, currentPage) {\n    if (pagesCount > 10) {\n      if (currentPage > 5) {\n        for (let i = currentPage - 4; i <= currentPage + 5; i++) {\n          pageNumbers.push(i);\n          if (i === pagesCount) break;\n        }\n      } else {\n        for (let i = 1; i <= 10; i++) {\n          pageNumbers.push(i);\n          if (i === pagesCount) break;\n        }\n      }\n    } else {\n      for (let i = 1; i <= pagesCount; i++) {\n        pageNumbers.push(i);\n      }\n    }\n  }\n\n  createPages(pageNumbers, pagesCount, currentPage);\n\n  return (\n    <div className=\"pagination\">\n      <nav className=\"pagination__nav\">\n        <div className=\"pagination__pages\">\n          {pageNumbers.map((page) => (\n            <span\n              key={page}\n              className={CN(\"pagination__page\", {\n                \"pagination__current-page\":\n                  currentPage === page,\n              })}\n              onClick={() => {\n                paginate(page);\n                // dispatch(actions.setCurrentPage(page));\n              }}\n            >\n              {page}\n            </span>\n          ))}\n        </div>\n      </nav>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions, selectors } from './redux/store';\n\nimport { MoviesList } from './components/MoviesList'\nimport { FindMovie } from './components/FindMovie';\nimport { SearchMovies } from './components/SearchMovies';\n// import { Loader } from './components/Loader';\nimport { Pagination } from \"./components/Pagination\";\nimport { getMovies } from './api/api';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const movies = useSelector(selectors.getMovies);\n  const loading = useSelector(selectors.getLoading);\n  const currentPage = useSelector(selectors.getCurrentPage);\n  const moviesPerPage = useSelector(selectors.getMoviesPerPage);\n  const totalMovies = useSelector(selectors.getTotalMovies);\n  const [notFound, setNotFound] = useState(false);\n\n  // useEffect(() => {\n  //   const fetchMovies = async () => {\n  //     dispatch(actions.setMovies(movies));\n  //     // dispatch(actions.setLoading(false));\n  //   }\n\n  //   fetchMovies();\n  // }, []);\n\n  const searchMovies = async (title, page) => {\n    const movies = await getMovies(title, page);\n\n    dispatch(actions.setLoading(true));\n    console.log(movies);\n    if (movies.Response === \"False\") {\n      setNotFound(true);\n    } else {\n      dispatch(actions.setMovies(movies.Search));\n      dispatch(actions.setTotalMovies(+movies.totalResults));\n      dispatch(actions.setLoading(false));\n    }\n    dispatch(actions.setLoading(false));\n  }\n\n  const indexOfLastMovie = currentPage * moviesPerPage;\n  const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\n  console.log(movies);\n  const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie);\n\n  const paginate = pageNumber => dispatch(\n    actions.setCurrentPage(pageNumber)\n  );\n\n  return (\n    <>\n      <SearchMovies\n        searchMovies={searchMovies}\n        notFound={notFound}\n        setNotFound={setNotFound}\n      />\n\n      <div className=\"page\">\n        <div className=\"page__content\">\n          <MoviesList\n            movies={currentMovies}\n            loading={loading}\n          />\n\n          <div className=\"page__pagination\">\n            <Pagination\n              moviesPerPage={moviesPerPage}\n              totalMovies={totalMovies}\n              paginate={paginate}\n            />\n          </div>\n        </div>\n\n        <div className=\"page__sidebar\">\n          {/* <FindMovie addMovie={addMovie} /> */}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}