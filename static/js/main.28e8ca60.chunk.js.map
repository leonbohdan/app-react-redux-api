{"version":3,"sources":["redux/store.js","components/MovieCard/MovieCard.jsx","components/Loader/Loader.jsx","api/api.js","components/MoviesList/MoviesList.jsx","components/Description/Description.jsx","components/History/History.jsx","components/SearchMovies/SearchMovies.jsx","components/Pagination/Pagination.jsx","App.jsx","index.js"],"names":["selectors","state","movies","searchTitle","loading","currentPage","moviesPerPage","totalMovies","preview","history","actions","type","imdbID","pageNumber","payload","query","movieDesc","intialState","sessionStorage","getItem","serializedState","JSON","parse","err","loadState","store","createStore","action","filter","movie","composeWithDevTools","subscribe","stringify","setItem","saveState","getState","MovieCard","Title","Description","Poster","imdbUrl","handleSelect","useState","details","setDetails","dispatch","useDispatch","className","CN","src","alt","href","onClick","Loader","URL_API","getMovies","title","page","fetch","then","response","json","MoviesList","movieTitle","map","key","useSelector","Actors","Awards","Country","Language","Director","Writer","Genre","Production","Runtime","Released","imdbRating","imdbVotes","Plot","History","i","SearchMovies","searchMovies","notFound","setNotFound","onSubmit","event","preventDefault","autoComplete","htmlFor","id","placeholder","header__input","value","onChange","target","Pagination","paginate","pageNumbers","pagesCount","push","createPages","Math","ceil","App","a","Response","Search","totalResults","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28e8ca60.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const selectors = {\n  getMovies: (state) => state.movies,\n  getSearchTitle: (state) => state.searchTitle,\n  getLoading: (state) => state.loading,\n  getCurrentPage: (state) => state.currentPage,\n  getMoviesPerPage: (state) => state.moviesPerPage,\n  getTotalMovies: (state) => state.totalMovies,\n  getPreview: (state) => state.preview,\n  getHistory: (state) => state.history,\n};\n\nconst SET_MOVIES = 'SET_MOVIES';\nconst DELETE_MOVIE = 'DELETE_MOVIE';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_LOADING = 'SET_LOADING';\nconst SET_SEARCH_TITLE = 'SET_SEARCH_TITLE';\nconst SET_TOTAL_MOVIES = 'SET_TOTAL_MOVIES';\nconst SET_PREVIEW = 'SET_PREVIEW';\nconst SET_HISTORY = 'SET_HISTORY';\n\nexport const actions = {\n  setMovies: (movies) => ({\n    type: SET_MOVIES,\n    movies,\n  }),\n\n  deleteMovie: (imdbID) => ({\n    type: DELETE_MOVIE,\n    imdbID,\n  }),\n\n  setCurrentPage: (pageNumber) => ({\n    type: SET_CURRENT_PAGE,\n    pageNumber,\n  }),\n\n  setLoading: (payload) => ({\n    type: SET_LOADING,\n    payload,\n  }),\n\n  setSearchTitle: (query) => ({\n    type: SET_SEARCH_TITLE,\n    query,\n  }),\n\n  setTotalMovies: (totalMovies) => ({\n    type: SET_TOTAL_MOVIES,\n    totalMovies,\n  }),\n\n  setPreview: (movieDesc) => ({\n    type: SET_PREVIEW,\n    movieDesc,\n  }),\n\n  setHistory: (query) => ({\n    type: SET_HISTORY,\n    query,\n  }),\n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case SET_MOVIES:\n      return {\n        ...state,\n        movies: action.movies,\n      };\n\n    case DELETE_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.filter((movie) => movie.imdbID !== action.imdbID),\n      };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.pageNumber,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    case SET_SEARCH_TITLE:\n      return {\n        ...state,\n        searchTitle: action.query,\n      };\n\n    case SET_TOTAL_MOVIES:\n      return {\n        ...state,\n        totalMovies: action.totalMovies,\n      };\n\n    case SET_PREVIEW:\n      return {\n        ...state,\n        preview: action.movieDesc,\n      };\n\n    case SET_HISTORY:\n      return {\n        ...state,\n        history: [...state.history, action.query],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = sessionStorage.getItem(\"moviesStore\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    sessionStorage.setItem(\"moviesStore\", serializedState);\n  } catch {\n    //\n  }\n};\n\nconst intialState = sessionStorage.getItem('moviesStore')\n  ? loadState()\n  : {\n    movies: [],\n    searchTitle: '',\n    loading: false,\n    currentPage: 1,\n    moviesPerPage: 10,\n    totalMovies: 0,\n    preview: null,\n    history: [],\n};\n\nconst store = createStore(reducer, composeWithDevTools());\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport default store;","import React, { useState } from 'react';\nimport './MovieCard.scss';\nimport CN from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../redux/store';\n\nexport const MovieCard = ({\n  Title,\n  Description,\n  Poster,\n  imdbUrl,\n  imdbID,\n  handleSelect,\n}) => {\n  const [details, setDetails] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"card\">\n      <div\n        className={CN(\"card__container\", {\n          \"is-flipped\": details,\n        })}\n      >\n        <figure className=\"card__face card__face--front \">\n          <img src={Poster} alt=\"Film logo\" className=\"card__image\" />\n        </figure>\n\n        <div className=\"card__face card__face--back \">\n          <div className=\"media-content\">\n            <>\n              <p className=\"title\">{Title}</p>\n              <p className=\"title\">{`imdbID: ${imdbID}`}</p>\n            </>\n          </div>\n\n          <div className=\"content\">\n            {Description}\n            <br />\n            <a href={`https://www.imdb.com/title/${imdbID}`}>IMDB</a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"card__content\">\n        <div className=\"card__content--buttons\">\n          <button\n            type=\"button\"\n            className=\"card__content--button\"\n            onClick={() => {\n              setDetails(!details);\n              handleSelect(Title);\n            }}\n          >\n            Show more\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"card__content--button\"\n            onClick={() => {\n              dispatch(actions.deleteMovie(imdbID));\n            }}\n          >\n            Delete film\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Description: PropTypes.string,\n  imgUrl: PropTypes.string,\n  imdbUrl: PropTypes.string,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const URL_API = 'https://www.omdbapi.com/';\n\nexport function getMovies(title, page) {\n  return fetch(\n    `${URL_API}?apikey=d905f6c1&s=${title}&page=${page}`\n  )\n    .then(response => response.json())\n}\n\nexport function getDetails(title) {\n  return fetch(`${URL_API}?apikey=d905f6c1&t=${title}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { Loader } from '../Loader';\nimport { getDetails } from '../../api/api';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../redux/store';\n\nexport const MoviesList = ({\n  movies,\n  loading,\n}) => {\n  const dispatch = useDispatch();\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleSelect = (movieTitle) => {\n    getDetails(movieTitle)\n      .then(movie => dispatch(actions.setPreview(movie)));\n  }\n\n  return (\n    <div className=\"movies\">\n      {movies.map((movie) => (\n        <MovieCard\n          key={movie.imdbID}\n          {...movie}\n          handleSelect={handleSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport './Description.scss';\nimport { useSelector} from 'react-redux';\nimport { selectors } from '../../redux/store';\n\nexport const Description = () => {\n  const preview = useSelector(selectors.getPreview);\n\n  return (\n    <>\n    <h2 className=\"details__header\">More details</h2>\n    {!(preview === null) ? (\n      <div className=\"details\">\n        <div>\n          <figure className=\"details__figure\">\n              <img\n                className=\"details__image\"\n                src={preview.Poster}\n                alt=\"Film logo\"\n              />\n          </figure>\n        </div>\n\n        <div className=\"details__content\">\n          <div className=\"details__media\">\n            <div className=\"media-content\">\n                <p className=\"details__title\">\n                  {preview.Title}\n                </p>\n            </div>\n          </div>\n\n          <div className=\"details__content--bottom\">\n            <p>\n              <strong>Actors: </strong>\n              {preview.Actors}\n            </p>\n            <p>\n              <strong>Awards: </strong>\n              {preview.Awards}\n            </p>\n            <p>\n              <strong>Country: </strong>\n              {preview.Country}\n              {` `}\n              <strong>Language: </strong>\n              {preview.Language}\n            </p>\n            <p>\n              <strong>Director: </strong>\n              {preview.Director}\n              {` `}\n              <strong>Writer: </strong>\n              {preview.Writer}\n            </p>\n            <p>\n              <strong>Genre: </strong>\n              {preview.Genre}\n            </p>\n            <p>\n              <strong>Production: </strong>\n              {preview.Production}\n            </p>\n            <p>\n              <strong>Runtime: </strong>\n              {preview.Runtime}\n            </p>\n            <p>\n              <strong>Released: </strong>\n              {preview.Released}\n            </p>\n            <p>\n              <strong>imdbRating: </strong>\n              {preview.imdbRating}\n              {` `}\n              <strong>imdbVotes: </strong>\n              {preview.imdbVotes}\n            </p>\n            <p>\n              <strong>Description: </strong>\n              {preview.Plot}\n            </p>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <p className=\"details__bottom\">\n        Click on the movie to show more\n      </p>\n    )}\n  </>\n  );\n}\n","import React from 'react';\nimport './History.scss';\nimport { useSelector } from 'react-redux';\nimport { selectors } from '../../redux/store';\n\nexport const History = () => {\n  const history = useSelector(selectors.getHistory);\n\n  return (\n    <div className=\"history\">\n      {history.map((query, i) => (\n        <div\n          key={i}\n          className=\"history__query\"\n        >\n          {`${query} >`}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport './SearchMovies.scss';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, selectors } from '../../redux/store';\nimport { History } from '../../components/History';\n\nexport const SearchMovies = ({\n  searchMovies,\n  notFound,\n  setNotFound\n}) => {\n  const dispatch = useDispatch();\n  const searchTitle = useSelector(selectors.getSearchTitle);\n  const currentPage = useSelector(selectors.getCurrentPage);\n\n  return (\n    <div className=\"header\">\n      <form\n        className=\"finder__form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          dispatch(actions.setHistory(searchTitle));\n          searchMovies(searchTitle, currentPage);\n          dispatch(actions.setCurrentPage(1));\n        }}\n        autoComplete=\"off\"\n      >\n        <div className=\"header__field\">\n          <label className=\"header__label\" htmlFor=\"movie-title\">\n            Movies searching\n          </label>\n\n          <div className=\"header__control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search...\"\n              className={CN({\n                header__input: true,\n                \"header__input--is-danger\": notFound,\n              })}\n              value={searchTitle}\n              onChange={(event) => {\n                dispatch(actions.setSearchTitle(event.target.value));\n                setNotFound(false);\n              }}\n            />\n          </div>\n\n          {notFound && (\n            <p className=\"header__help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"header__field\">\n          <div className=\"header__control\">\n            <button\n              type=\"submit\" className=\"header__button is-light\"\n            >\n              Find movies\n            </button>\n\n            <History />\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nSearchMovies.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n  notFound: PropTypes.bool.isRequired,\n  setNotFound: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectors } from '../../redux/store';\nimport './Pagination.scss';\nimport CN from 'classnames';\n\nexport const Pagination = ({\n  moviesPerPage,\n  totalMovies,\n  paginate,\n  searchMovies\n}) => {\n  const currentPage = useSelector(selectors.getCurrentPage);\n  const searchTitle = useSelector(selectors.getSearchTitle);\n  const pageNumbers = [];\n  const pagesCount = Math.ceil(totalMovies / moviesPerPage);\n\n  function createPages(pageNumbers, pagesCount, currentPage) {\n    if (pagesCount > 10) {\n      if (currentPage > 5) {\n        for (let i = currentPage - 4; i <= currentPage + 5; i++) {\n          pageNumbers.push(i);\n          if (i === pagesCount) break;\n        }\n      } else {\n        for (let i = 1; i <= 10; i++) {\n          pageNumbers.push(i);\n          if (i === pagesCount) break;\n        }\n      }\n    } else {\n      for (let i = 1; i <= pagesCount; i++) {\n        pageNumbers.push(i);\n      }\n    }\n  }\n\n  createPages(pageNumbers, pagesCount, currentPage);\n\n  return (\n    <div className=\"pagination\">\n      <nav className=\"pagination__nav\">\n        <div className=\"pagination__pages\">\n          {pageNumbers.map((page) => (\n            <div\n              key={page}\n              className={CN(\"pagination__page\", {\n                \"pagination__current-page\": currentPage === page,\n              })}\n              onClick={() => {\n                paginate(page);\n                searchMovies(searchTitle, page);\n              }}\n            >\n              {page}\n            </div>\n          ))}\n        </div>\n      </nav>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions, selectors } from './redux/store';\nimport { MoviesList } from './components/MoviesList'\nimport { Description } from './components/Description';\nimport { SearchMovies } from './components/SearchMovies';\nimport { Pagination } from './components/Pagination';\nimport { getMovies } from './api/api';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const movies = useSelector(selectors.getMovies);\n  const loading = useSelector(selectors.getLoading);\n  const moviesPerPage = useSelector(selectors.getMoviesPerPage);\n  const totalMovies = useSelector(selectors.getTotalMovies);\n  const [notFound, setNotFound] = useState(false);\n\n  const searchMovies = async (title, page) => {\n    const movies = await getMovies(title, page);\n\n    dispatch(actions.setLoading(true));\n\n    if (movies.Response === \"False\") {\n      setNotFound(true);\n    } else {\n      dispatch(actions.setMovies(movies.Search));\n      dispatch(actions.setTotalMovies(+movies.totalResults));\n      dispatch(actions.setLoading(false));\n    }\n\n    dispatch(actions.setLoading(false));\n  };\n\n  const paginate = pageNumber => dispatch(\n    actions.setCurrentPage(pageNumber)\n  );\n\n  return (\n    <>\n      <SearchMovies\n        searchMovies={searchMovies}\n        notFound={notFound}\n        setNotFound={setNotFound}\n      />\n\n      <div className=\"page\">\n        <div className=\"page__content\">\n          <MoviesList\n            movies={movies}\n            loading={loading}\n          />\n\n          <div className=\"page__pagination\">\n            <Pagination\n              moviesPerPage={moviesPerPage}\n              totalMovies={totalMovies}\n              paginate={paginate}\n              searchMovies={searchMovies}\n            />\n          </div>\n        </div>\n\n        <div className=\"page__sidebar\">\n          <Description />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}